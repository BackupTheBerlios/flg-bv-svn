package de.flg_informatik.utils.shell;

public class OSCommand implements CallBackShellReaderListener{
	static CallBackShellReader cbsr=null;
	boolean debug;
	int matchedstring=0;
	
	
	public static  int execute(String[] command){
		return execute(command, (java.io.File)null, null, null, true);
	
	}
	public static  int execute(String[] command, String[] inputmatches){ 
		return execute(command, (java.io.File)null, inputmatches, null, true);
	
	}
	public static int execute(String[] command, String[] inputmatches, String[] errormatches){
	
		return execute(command, (java.io.File)null, inputmatches, errormatches, true);
	}
	
	public static  int execute(String[] command, java.io.File pfad){
		return execute(command, pfad, null, null, true);
	
	}
	public static  int execute(String[] command, java.io.File pfad, String[] inputmatches){ 
		return execute(command, pfad, inputmatches, null, true);
		
	}
	public static int execute(String[] command, java.io.File pfad, String[] inputmatches, String[] errormatches){
		return execute(command, pfad, inputmatches, errormatches, true);	
			
	}
	public static  int execute(String[] command, boolean debug){
		return execute(command, (java.io.File)null, null, null, debug);
	
	}
	public static  int execute(String[] command, String[] inputmatches, boolean debug){ 
		return execute(command, (java.io.File)null, inputmatches, null, debug);
	
	}
	public static int execute(String[] command, String[] inputmatches, String[] errormatches, boolean debug){
	
		return execute(command, (java.io.File)null, inputmatches, errormatches, debug);
	}
	
	public static  int execute(String[] command, java.io.File pfad, boolean debug){
		return execute(command, pfad, null, null, debug);
	
	}
	public static  int execute(String[] command, java.io.File pfad, String[] inputmatches, boolean debug){ 
		return execute(command, pfad, inputmatches, null, debug);
	
	}
	public static synchronized int execute(String[] command, java.io.File pfad, String[] inputmatches, String[] errormatches, boolean debug){
		/*for (int i=0; i<command.length;i++) {
			System.out.print(command[i]);
		}*/
		int ret =-1;
		OSCommand osc=new OSCommand();
		osc.debug = debug;
		try{
			if (command.length > 1) {
				cbsr = new CallBackShellReader(inputmatches, errormatches,osc);
				ret=cbsr.start(Runtime.getRuntime().exec(command, null, pfad));
			}else{
				cbsr = new CallBackShellReader( inputmatches, errormatches, osc);		
				ret=cbsr.start(Runtime.getRuntime().exec(command[0], null, pfad));
			}
			
			
		}catch(Exception e){
			System.out.println(e);
		}
		try{
			
			
		}catch(Exception e){
			System.out.println(e);
			ret = -2;
		}
		new de.flg_informatik.utils.Pause(2500);
		cbsr.stop();
		if (debug){
			System.out.println("OSC: return ="+ ret );
		}
		
		return ret+osc.matchedstring;
		
	}

	public synchronized void errMatch(String string, int which) {
		matchedstring=(which+1)*256*256;
		if (debug){
			System.out.println(this+ ": errMatch(String string ="+ string +" , int which()="+which+ " -> return="+ matchedstring);
		}
		// TODO Auto-generated method stub
		
	}

	public synchronized void errReadln(String string) {
		if (debug){
			System.out.println(this+ ": errReadln(String string = "+ string + " )");
		}
		
	}

	public synchronized void inputMatch(String string, int which) {
		matchedstring=(which+1)*256;
		if (debug){
			System.out.println(this+ ": inputMatch(String string ="+ string +" , int which()="+which+ " -> return="+ matchedstring);
		}
		
		
	}

	public synchronized void inputReadln(String string) {
		if (debug){
			System.out.println(this+ ": inputReadln(String string = " + string + " )");
		}
	}

	public boolean isReady() {
		// TODO Auto-generated method stub
		return true;
	}
	

	public static void main(String[] args){
		// testing
		System.out.println(OSCommand.execute(new String[]{"mount"} , true));
		//System.out.println(OSCommand.execute(new String[] {"net", "use", "H:"}, new java.io.File("C:\\")));
		
	}

}
